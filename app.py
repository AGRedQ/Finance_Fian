# app.py
# -*- coding: utf-8 -*-

import streamlit as st
from plotly import graph_objs as go
from datetime import date
import pandas as pd
import random # <<< TH√äM IMPORT N√ÄY
from service import PredictionService
from sklearn.metrics import classification_report

# ... (Danh s√°ch GLOBAL_TICKER_LIST gi·ªØ nguy√™n) ...
GLOBAL_TICKER_LIST = [
    "AAPL", "MSFT", "GOOGL", "AMZN", "NVDA", "META", "TSLA", "ORCL", "ADBE", "CRM", "INTC", "AMD", "QCOM", "CSCO",
    "JPM", "BAC", "WFC", "GS", "MS", "V", "MA", "AXP", "BLK", "JNJ", "PFE", "MRK", "UNH", "LLY", "ABBV",
    "WMT", "COST", "HD", "NKE", "MCD", "KO", "PEP", "PG", "BA", "CAT", "XOM", "CVX", "ASML", "LVMUY",
    "NVO", "SAP", "SIE.DE", "TM", "SHEL", "HSBC", "TSM", "BABA", "TCEHY", "SONY", "SSNLF",
    "FPT.VN", "VNM.VN", "HPG.VN", "VCB.VN", "TCB.VN", "MSN.VN",
]

class TrendPredictorApp:
    # ... (C√°c h√†m __init__, _setup_page_config, v√† c√°c h√†m _plot... gi·ªØ nguy√™n) ...
    def __init__(self, service: PredictionService):
        self.service = service

    def _setup_page_config(self):
        st.set_page_config(page_title="Tr·ª£ L√Ω D·ª± ƒêo√°n Xu H∆∞·ªõng C·ªï Phi·∫øu", page_icon="üìà", layout="wide")

    def _plot_signals_on_price_chart(self, actual_price, predictions, test_dates, ticker, term_name, label_map):
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=test_dates, y=actual_price, mode='lines', name='Gi√° th·ª±c t·∫ø', line=dict(color='cyan', width=2)))
        up_label_val = next((k for k, v in label_map.items() if v == 'Up'), 2)
        down_label_val = next((k for k, v in label_map.items() if v == 'Down'), 0)
        up_signals = test_dates[predictions == up_label_val]
        down_signals = test_dates[predictions == down_label_val]
        fig.add_trace(go.Scatter(x=up_signals, y=actual_price.loc[up_signals], mode='markers', name='D·ª± ƒëo√°n L√™n', marker=dict(color='lime', size=10, symbol='triangle-up')))
        fig.add_trace(go.Scatter(x=down_signals, y=actual_price.loc[down_signals], mode='markers', name='D·ª± ƒëo√°n Xu·ªëng', marker=dict(color='red', size=10, symbol='triangle-down')))
        fig.update_layout(title=f"T√≠n hi·ªáu d·ª± ƒëo√°n {term_name} tr√™n gi√° th·ª±c t·∫ø c·ªßa {ticker}", xaxis_title="Ng√†y", yaxis_title="Gi√°", template="plotly_dark", legend_title="Ch√∫ gi·∫£i", xaxis_rangeslider_visible=True)
        st.plotly_chart(fig, use_container_width=True)

    def _plot_future_signals_chart(self, future_predictions, future_price_baseline, ticker, label_map):
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=future_price_baseline.index, y=future_price_baseline, mode='lines', name='Gi√° c∆° s·ªü d·ª± b√°o (Prophet)', line=dict(color='cyan', width=2, dash='dash')))
        predictions = future_predictions['labels']
        up_label_val = next((k for k, v in label_map.items() if v == 'Up'), 2)
        down_label_val = next((k for k, v in label_map.items() if v == 'Down'), 0)
        up_signal_dates = predictions.index[predictions == up_label_val]
        down_signal_dates = predictions.index[predictions == down_label_val]
        if not up_signal_dates.empty:
            up_prices = future_price_baseline.loc[future_price_baseline.index.intersection(up_signal_dates)]
            if not up_prices.empty:
                fig.add_trace(go.Scatter(x=up_prices.index, y=up_prices.values, mode='markers', name='D·ª± ƒëo√°n L√™n', marker=dict(color='lime', size=10, symbol='triangle-up')))
        if not down_signal_dates.empty:
            down_prices = future_price_baseline.loc[future_price_baseline.index.intersection(down_signal_dates)]
            if not down_prices.empty:
                fig.add_trace(go.Scatter(x=down_prices.index, y=down_prices.values, mode='markers', name='D·ª± ƒëo√°n Xu·ªëng', marker=dict(color='red', size=10, symbol='triangle-down')))
        fig.update_layout(title=f"T√≠n hi·ªáu d·ª± b√°o xu h∆∞·ªõng t∆∞∆°ng lai cho {ticker}", xaxis_title="Ng√†y", yaxis_title="Gi√°", template="plotly_dark", legend_title="Ch√∫ gi·∫£i")
        st.plotly_chart(fig, use_container_width=True)

    def _render_batch_test_results(self, results_df, ticker_of_interest=None):
        st.subheader(f"K·∫øt qu·∫£ Ki·ªÉm tra Hi·ªáu su·∫•t tr√™n {len(results_df)} m√£")
        if results_df is None or results_df.empty:
            st.warning("Kh√¥ng c√≥ k·∫øt qu·∫£ n√†o ƒë·ªÉ hi·ªÉn th·ªã.")
            return

        def highlight_ticker(s):
            return ['background-color: #004466' if s.ticker == ticker_of_interest else '' for _ in s]

        st.dataframe(results_df.style.apply(highlight_ticker, axis=1).format({
            'up_precision': '{:.1%}', 'up_recall': '{:.1%}', 'up_f1_score': '{:.2f}',
            'down_precision': '{:.1%}', 'down_recall': '{:.1%}', 'down_f1_score': '{:.2f}',
            'accuracy': '{:.1%}'
        }), height=300)
        
        st.subheader("So s√°nh Hi·ªáu su·∫•t Trung b√¨nh")
        avg_metrics = results_df[results_df['best_model'] != 'ERROR'].drop(columns=['ticker', 'best_model']).mean()
        
        if ticker_of_interest and ticker_of_interest in results_df['ticker'].values:
            ticker_metrics = results_df.loc[results_df['ticker'] == ticker_of_interest].drop(columns=['ticker', 'best_model']).iloc[0]
            comparison_df = pd.DataFrame({'Hi·ªáu su·∫•t Trung b√¨nh': avg_metrics, f'Hi·ªáu su·∫•t cho {ticker_of_interest}': ticker_metrics})
            st.dataframe(comparison_df.style.format('{:.2f}'))
        else:
            comparison_df = pd.DataFrame({'Hi·ªáu su·∫•t Trung b√¨nh': avg_metrics})
            st.dataframe(comparison_df.style.format('{:.2f}'))
        
        st.info(f"B·∫£ng tr√™n so s√°nh hi·ªáu su·∫•t c·ªßa m√¥ h√¨nh tr√™n m√£ b·∫°n ch·ªçn v·ªõi hi·ªáu su·∫•t trung b√¨nh tr√™n m·ªôt m·∫´u ng·∫´u nhi√™n g·ªìm {len(results_df)} m√£ to√†n c·∫ßu.")


    def run(self):
        self._setup_page_config()
        st.title("üìà Tr·ª£ L√Ω D·ª± ƒêo√°n Xu H∆∞·ªõng C·ªï Phi·∫øu")
        
        # --- PH·∫¶N 1: C√ÄI ƒê·∫∂T CHUNG ---
        st.header("1. C√†i ƒë·∫∑t Ph√¢n t√≠ch")
        col1, col2, col3 = st.columns(3)
        with col1:
            ticker_option = st.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu ƒë·ªÉ ph√¢n t√≠ch", GLOBAL_TICKER_LIST, index=4)
            custom_ticker = st.text_input("Ho·∫∑c nh·∫≠p m√£ kh√°c").upper()
            selected_ticker = custom_ticker if custom_ticker else ticker_option
        with col2:
            prediction_type = st.selectbox("Ch·ªçn lo·∫°i ph√¢n t√≠ch", ["Ph√¢n t√≠ch Ng·∫Øn h·∫°n", "Ph√¢n t√≠ch Trung h·∫°n"])
        with col3:
            horizons = {"30 ng√†y t·ªõi": 30, "3 th√°ng t·ªõi": 63, "6 th√°ng t·ªõi": 126}
            selected_horizon_label = st.selectbox("Th·ªùi gian d·ª± ƒëo√°n t∆∞∆°ng lai", list(horizons.keys()))
            periods_to_forecast = horizons[selected_horizon_label]
        
        st.markdown("---")

        # --- PH·∫¶N 2: SO S√ÅNH (BENCHMARKING) ---
        st.header("2. T√πy ch·ªçn So s√°nh Hi·ªáu su·∫•t")
        
        # <<< THAY ƒê·ªîI 1: TH√äM THANH TR∆Ø·ª¢T >>>
        num_tickers_to_compare = st.slider(
            "Ch·ªçn s·ªë l∆∞·ª£ng m√£ ng·∫´u nhi√™n ƒë·ªÉ so s√°nh",
            min_value=10, 
            max_value=len(GLOBAL_TICKER_LIST), 
            value=25, # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
            step=5,
            help="Ch·ªçn s·ªë l∆∞·ª£ng m√£ c·ªï phi·∫øu t·ª´ danh s√°ch to√†n c·∫ßu ƒë·ªÉ ch·∫°y ki·ªÉm tra v√† so s√°nh hi·ªáu su·∫•t. S·ªë l∆∞·ª£ng l·ªõn h∆°n cho k·∫øt qu·∫£ ƒë√°ng tin c·∫≠y h∆°n nh∆∞ng m·∫•t nhi·ªÅu th·ªùi gian h∆°n."
        )

        # --- PH·∫¶N 3: N√öT B·∫§M V√Ä TH·ª∞C THI ---
        if st.button("üöÄ B·∫Øt ƒë·∫ßu Ph√¢n t√≠ch v√† So s√°nh!", type="primary", use_container_width=True):
            if not selected_ticker:
                st.warning("Vui l√≤ng ch·ªçn ho·∫∑c nh·∫≠p m·ªôt m√£ c·ªï phi·∫øu.")
            else:
                # --- Ch·∫°y ph√¢n t√≠ch ƒë∆°n l·∫ª ---
                st.subheader(f"K·∫øt qu·∫£ Ph√¢n t√≠ch cho {selected_ticker}")
                term_name = "Ng·∫Øn h·∫°n" if "Ng·∫Øn h·∫°n" in prediction_type else "Trung h·∫°n"
                with st.spinner(f"ƒêang th·ª±c hi·ªán ph√¢n t√≠ch {term_name} cho m√£ **{selected_ticker}**..."):
                    if term_name == "Ng·∫Øn h·∫°n":
                        single_results = self.service.run_short_term_prediction(selected_ticker, periods_to_forecast)
                    else:
                        single_results = self.service.run_mid_term_prediction(selected_ticker, periods_to_forecast)

                if single_results is None:
                    st.error(f"Kh√¥ng th·ªÉ ho√†n th√†nh ph√¢n t√≠ch cho {selected_ticker}.")
                else:
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch ƒë∆°n l·∫ª...
                    info = single_results['data_info']
                    st.info(f"üèÜ **M√¥ h√¨nh ƒë·ªÅ xu·∫•t:** `{single_results['best_model']}`")
                    self._plot_signals_on_price_chart(single_results['test_data']['actual_price'], single_results['predictions_on_test'][single_results['best_model']], single_results['test_data']['dates'], selected_ticker, term_name, info['label_map'])
                    st.subheader("D·ª± b√°o xu h∆∞·ªõng t∆∞∆°ng lai")
                    if single_results['future_forecasts'] and single_results['best_model'] in single_results['future_forecasts']:
                         self._plot_future_signals_chart(single_results['future_forecasts'][single_results['best_model']], single_results["future_price_baseline"], selected_ticker, info['label_map'])

                st.markdown("---")

                # --- Ch·∫°y ki·ªÉm tra t·ªïng qu√°t ƒë·ªÉ so s√°nh ---
                st.header("So s√°nh v·ªõi Hi·ªáu su·∫•t To√†n c·∫ßu")
                analysis_type_param = 'short_term' if term_name == 'Ng·∫Øn h·∫°n' else 'mid_term'
                
                # <<< THAY ƒê·ªîI 2: T·∫†O M·∫™U NG·∫™U NHI√äN >>>
                # L·∫•y m·ªôt m·∫´u ng·∫´u nhi√™n t·ª´ danh s√°ch to√†n c·∫ßu
                other_tickers = [t for t in GLOBAL_TICKER_LIST if t != selected_ticker]
                random_sample = random.sample(other_tickers, k=min(num_tickers_to_compare - 1, len(other_tickers)))
                
                # ƒê·∫£m b·∫£o m√£ ƒëang ph√¢n t√≠ch lu√¥n c√≥ trong danh s√°ch
                ticker_list_to_test = [selected_ticker] + random_sample
                # X√°o tr·ªôn danh s√°ch cu·ªëi c√πng ƒë·ªÉ m√£ ƒëang ph√¢n t√≠ch kh√¥ng lu√¥n ·ªü ƒë·∫ßu
                random.shuffle(ticker_list_to_test)
                
                with st.spinner(f"ƒêang ch·∫°y ki·ªÉm tra tr√™n {len(ticker_list_to_test)} m√£ ng·∫´u nhi√™n ƒë·ªÉ l√†m benchmark... (vi·ªác n√†y c√≥ th·ªÉ m·∫•t m·ªôt l√∫c)"):
                    batch_results_df = self.service.run_batch_test(ticker_list_to_test, analysis_type_param)
                
                self._render_batch_test_results(batch_results_df, ticker_of_interest=selected_ticker)


if __name__ == "__main__":
    prediction_service = PredictionService()
    app = TrendPredictorApp(service=prediction_service)
    app.run()